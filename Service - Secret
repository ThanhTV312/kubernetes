Service - Secret

Service --- can bang tai dich vu

https://v1-16.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#service-v1-core


--------------------- 1. Tạo Service kiểu ClusterIP, không Selector

service.yaml

apiVersion: v1
kind: Service
metadata:
  name: service1
spec:
  # selector:
  #   app: myapp
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80

an Shift + S, chon Kubernetes Service

--
chuyen huong den server, chua dung den selector:

kubectl apply -f service.yaml

service/service1 created


watch kubectl get all -o wide

kubectl get service

[root@master ~]# kubectl get service
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP   19d
service1     ClusterIP   10.107.163.168   <none>        80/TCP    95s

kubectl get  svc

kubectl get  svc/service1 -o yaml

kubectl describe svc/service1

[root@master ~]# kubectl describe svc/service1
Name:              service1
Namespace:         default
Labels:            <none>
Annotations:       Selector:  <none>
Type:              ClusterIP
IP:                10.107.163.168
Port:              <unset>  80/TCP
TargetPort:        80/TCP
Endpoints:         <none>
Session Affinity:  None
Events:            <none>

chua co Endpoints

--- kiem tra

pod/tools                        1/1     Running   3          17d     192.168.234.26   master.xtl    <none>           <none>

truy cap vao pod tools:

kubectl exec -it tools bash

curl 10.107.163.168:80

ko co phan hoi tu service tra ve

---

kubectl cluster-info

[root@master ~]# kubectl cluster-info
Kubernetes master is running at https://192.168.56.101:6443
KubeDNS is running at https://192.168.56.101:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
Metrics-server is running at https://192.168.56.101:6443/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.

KubeDNS:

ten day du: (ten service . ten namespace)


ping service1.default


---- Tạo EndPoint cho Service (không selector)

kubectl get enpoints

tao endpoint:
endpoint.yaml

apiVersion: v1
kind: Endpoints
metadata:
  name: service1
subsets:
  - addresses:
      - ip: 216.58.220.195      # đây là IP google.com
    ports:
      # - name: port1
        port: 80
		
kubectl apply -f endpoint.yaml

[root@master ~]# kubectl apply -f endpoint.yaml
endpoints/service1 created

kubectl describe svc/service1

[root@master ~]# kubectl describe svc/service1
Name:              service1
Namespace:         default
Labels:            <none>
Annotations:       Selector:  <none>
Type:              ClusterIP
IP:                10.107.163.168
Port:              <unset>  80/TCP
TargetPort:        80/TCP
Endpoints:         216.58.220.195:80
Session Affinity:  None
Events:            <none>

da co endpoint

--- kiem tra bang pod tools

kubectl exec -it tools bash

curl 10.107.163.168:80

root@tools:/# curl 10.107.163.168:80
<HTML><HEAD><meta http-equiv="content-type" content="text/html;charset=utf-8">
<TITLE>301 Moved</TITLE></HEAD><BODY>
<H1>301 Moved</H1>
The document has moved
<A HREF="http://www.google.com/">here</A>.
</BODY></HTML>

curl service1:80

ctrl p q

-----


kubectl apply -f endpoint-pod.yaml

[root@master ~]# kubectl apply -f endpoint-pod.yaml
pod/myapp1 created
pod/myapp2 created

-- lay thong tin pod theo nhan

kubectl get po -l "app=app1" -o wide


----------------- 2. Service có Selector, chọn các Pod là Endpoint của Service -----------
--- tao service moi
dung Selector, su dung nhan la 2 pod vua trien khai

  selector:
     app: app1
	 
	 
service2.yaml

apiVersion: v1
kind: Service
metadata:
  name: service2
spec:
  selector:
     app: app1
  type: ClusterIP
  ports:
#- name: port1
    - port: 80
      targetPort: 80


kubectl apply -f service2.yaml

kubectl get all -o wide


kubectl describe svc/service2

[root@master ~]# kubectl describe svc/service2
Name:              service2
Namespace:         default
Labels:            <none>
Annotations:       Selector:  app=app1
Type:              ClusterIP
IP:                10.106.162.24
Port:              <unset>  80/TCP
TargetPort:        80/TCP
Endpoints:         192.168.234.41:80,192.168.41.156:80
Session Affinity:  None
Events:            <none>

tai Endpoint, co 2 IP tuong ung 2 ip cua 2 pod app1, app2

-- check

kubectl exec -it tools bash

curl service2:80

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>


<html><body><h1>It works!</h1></body></html>


===> can bang tai : luc chay pod 1 luc chay pod 2



--------------------- 3. Service kiểu NodePort -----------

kubectl delete svc/service2

service3.yaml

apiVersion: v1
kind: Service
metadata:
  name: service3
spec:
  selector:
     app: app1
  type: NodePort
  ports:
    - name: port1
      port: 80
      targetPort: 80
      nodePort: 31080

kubectl apply -f service3.yaml

kubectl describe svc/service3

[root@master ~]# kubectl describe svc/service3
Name:                     service3
Namespace:                default
Labels:                   <none>
Annotations:              Selector:  app=app1
Type:                     NodePort
IP:                       10.109.131.153
Port:                     port1  80/TCP
TargetPort:               80/TCP
NodePort:                 port1  31080/TCP
Endpoints:                192.168.234.41:80,192.168.41.156:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>

kubectl get no -o wide

[root@master ~]# kubectl get no -o wide
NAME          STATUS   ROLES    AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME
master.xtl    Ready    master   19d   v1.18.6   192.168.56.101   <none>        CentOS Linux 7 (Core)   3.10.0-1127.18.2.el7.x86_64   docker://19.3.11
worker1.xtl   Ready    <none>   19d   v1.18.6   192.168.56.102   <none>        CentOS Linux 7 (Core)   3.10.0-1127.18.2.el7.x86_64   docker://19.3.11
worker2.xtl   Ready    <none>   19d   v1.18.6   192.168.56.103   <none>        CentOS Linux 7 (Core)   3.10.0-1127.18.2.el7.x86_64   docker://19.3.11

truy cap:
http://192.168.56.102:31080/
Welcome to nginx!

http://192.168.56.103:31080/
It works!


--- xoa tat ca pod co file yaml trong thu muc hien tai

kubectl delete -f .


--- nginx.conf

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  4096;  ## Default: 1024
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;
    #gzip  on;
    server {
        listen 80;
        server_name localhost;                    # my-site.com
        root  /usr/share/nginx/html;
    }
    server {
        listen  443 ssl;
        server_name  localhost;                   # my-site.com;
        ssl_certificate /certs/tls.crt;           # fullchain.pem
        ssl_certificate_key /certs/tls.key;       # privkey.pem
        root /usr/share/nginx/html;
    }
}


--- index.html

<!DOCTYPE html>
<html>
<head><title>Nginx -  Test!</title></head>
<body>
    <h1>Chay Nginx tren Kubernetes</h1>    
</body>
</html>


--- Dockerfile-service-kube.dockerfile

FROM nginx:1.17.6
COPY nginx.conf /etc/nginx/nginx.conf
COPY index.html /usr/share/nginx/html/index.html

----- build image

docker build -t thanhtv1203/swarm:nginx -f Dockerfile-service-kube.dockerfile .

[root@master ~]# docker build -t thanhtv1203/swarm:nginx -f Dockerfile-service-kube.dockerfile .
Sending build context to Docker daemon  120.8MB
Step 1/3 : FROM nginx:1.17.6
1.17.6: Pulling from library/nginx
8ec398bc0356: Pull complete 
465560073b6f: Pull complete 
f473f9fd0a8c: Pull complete 
Digest: sha256:b2d89d0a210398b4d1120b3e3a7672c16a4ba09c2c4a0395f18b9f7999b768f2
Status: Downloaded newer image for nginx:1.17.6
 ---> f7bb5701a33c
Step 2/3 : COPY nginx.conf /etc/nginx/nginx.conf
 ---> a345cac0d76a
Step 3/3 : COPY index.html /usr/share/nginx/html/index.html
 ---> 961b6214ee36
Successfully built 961b6214ee36
Successfully tagged thanhtv1203/swarm:nginx


docker push thanhtv1203/swarm:nginx

[root@master ~]# docker push thanhtv1203/swarm:nginx
The push refers to repository [docker.io/thanhtv1203/swarm]
c6d3cde82a24: Pushed 
c4d86ef4ef5a: Pushed 
75248c0d5438: Mounted from library/nginx 
49434cc20e95: Mounted from library/nginx 
556c5fb0d91b: Mounted from library/nginx 
nginx: digest: sha256:aa7c8df50c625e43f857ea2e542316576550bf3120c53f2d27d4b45f414af43e size: 1362

------- Tạo Deployment triển khai các Pod chạy image thanhtv1203/swarm:nginx

nginx-service.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: thanhtv1203/swarm:nginx
        imagePullPolicy: "Always"
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
        ports:
        - containerPort: 80
        - containerPort: 443

kubectl apply -f nginx-service.yaml

-- pod bi loi

pod/nginx-744db774df-c6xw2   0/1     CrashLoopBackOff   2          62s   192.168.41.157   worker1.xtl   <none>           <none>

--- doc logs

kubectl logs pod/nginx-744db774df-c6xw2 

[root@master ~]# kubectl logs pod/nginx-744db774df-c6xw2 
2020/08/30 11:32:35 [emerg] 1#1: cannot load certificate "/certs/tls.crt": BIO_new_file() failed (SSL: error:02001002:system library:fopen:No such file or directory:fopen('/certs/tls.crt','r') error:2006D080:BIO routines:BIO_new_file:no such file)
nginx: [emerg] cannot load certificate "/certs/tls.crt": BIO_new_file() failed (SSL: error:02001002:system library:fopen:No such file or directory:fopen('/certs/tls.crt','r') error:2006D080:BIO routines:BIO_new_file:no such file)

loi ko load dc cert

--- xoa deployment

kubectl delete -f nginx-service.yaml

-- tao cert

mkdir certs2
cd certs2


# sinh ra cert
openssl req -nodes -newkey rsa:2048 -keyout tls.key  -out ca.csr -subj "/CN=thanhtv1203"

tao ra 2 file:  ca.csr tls.key

# chuyen doi sang dang openssl x509 

openssl x509 -req -sha256 -days 365 -in ca.csr -signkey tls.key -out tls.crt

---------Tạo Secret tên secret-nginx-cert chứa các xác thực

kubectl create secret tls secret-nginx-cert --cert=/root/certs2/tls.crt  --key=/root/certs2/tls.key

kubectl get secret

[root@master certs2]# kubectl get secret
NAME                  TYPE                                  DATA   AGE
default-token-256pb   kubernetes.io/service-account-token   3      19d
secret-nginx-cert     kubernetes.io/tls                     2      38s

kubectl describe secret/secret-nginx-cert

[root@master certs2]# kubectl describe secret/secret-nginx-cert
Name:         secret-nginx-cert
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  kubernetes.io/tls

Data
====
tls.crt:  981 bytes
tls.key:  1704 bytes

-- chinh sua lai file manifest: nginx-service.yaml

...

    spec: 
      volumes:
        - name: cert-volume
          secret:
             secretName: "secret-nginx-cert" 
			 ...
			 
			 
        volumeMounts:
          - mountPath: "/certs"
            name: cert-volume 		 

-- tao them Service truy cập kiểu NodePort vao file: nginx-service.yaml

nginx-service.yaml

---
apiVersion: v1
kind: Service
metadata:
  name: my-nginx
spec:
  type: NodePort
  ports:
  - port: 8080        # cổng dịch vụ ánh xạ vào cổng POD
    targetPort: 80    # cổng POD ánh xạ vào container
    protocol: TCP
    name: http
    nodePort: 31080   # cổng NODE ánh xạ vào cổng dịch vụ (chỉ chọn 30000-32767)

  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
    nodePort: 31443
  # Chú ý đúng với Label của POD tại Deployment
  selector:
    app: nginx

kubectl apply -f nginx-service.yaml

kubectl get no -o wide

--- check

http://192.168.56.102:31080/

Cháº¡y Nginx trĂªn Kubernetes

Welcome to nginx!


https://192.168.56.102:31443/

Cháº¡y Nginx trĂªn Kubernetes



